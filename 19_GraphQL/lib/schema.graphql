# Defino mi custom type persoalizado

type Course {
	_id: ID! 	 # El tipo id es un escalar que me permite usar identificadores 
	title: String!
	teacher: String
	description: String!
	topic: String
	people: [Student]
}

type Student {
	_id: ID!
	name: String!
	email: String!
}

# Esta query me permitirá consultar los cursos
# getCourses devuelve un arreglo de tipo Course
# El signo de admiración dice que es un campo obligatorio
# Mando argumentos entre paréntesis
type Query {
	"Devuelve todos los cursos"
	getCourses: [Course]
	"Devuelve sólo un curso"
	getCourse(id: ID!): Course

	"Devuelve todos los estudiantes"
	getStudents: [Student]
	"Devuelve sólo un estudiante"
	getStudent(id: ID!): Student
	"Manda un saludo"
	
	saludo: String
}

input CourseInput {
	title: String!
	teacher: String
	description: String!
	topic: String
}

input CourseEditInput {
	title: String
	teacher: String
	description: String
	topic: String
}

input StudentInput {
	name: String!
	email: String!
}

input StudentEditInput {
	name: String
	email: String
}

type Mutation {
	"Crea un curso"
	createCourse(input: CourseInput!): Course
	"Edita un curso"
	editCourse(_id: ID!, input: CourseEditInput): Course
	"Crea un estudiante"
	createStudent(input: StudentInput!): Student
	"Edita un estudiante"
	editStudent(_id: ID!, input: StudentEditInput): Student
	"Agrega una persona a un curso"
	addPeople(courseID: ID!, personID: ID!): Course
}