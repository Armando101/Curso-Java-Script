"Enum para validar los tipos de nivel"
enum Level {
	principiante
	intermedio
	avanzado
}

# Defino mi custom type persoalizado

type Course {
	_id: ID! 	 # El tipo id es un escalar que me permite usar identificadores 
	title: String!
	teacher: String
	description: String!
	topic: String 			@deprecated # Indico que en un futuró no estará disponible este campo
	people: [Student]
	level: Level		# Campo de nombre Level de tipo Level
}

interface Person {
	_id: ID!
	name: String!
	email: String!
}

type Monitor implements Person {
	_id: ID!
	name: String!
	email: String!
	phone: String
}

type Student implements Person {
	_id: ID!
	name: String!
	email: String!
	avatar: String
}


# Esta query me permitirá consultar los cursos
# getCourses devuelve un arreglo de tipo Course
# El signo de admiración dice que es un campo obligatorio
# Mando argumentos entre paréntesis
type Query {
	"Devuelve todos los cursos"
	getCourses: [Course]
	"Devuelve sólo un curso"
	getCourse(id: ID!): Course

	"Devuelve todos los estudiantes"
	getPersons: [Person]
	"Devuelve sólo un estudiante"
	getPerson(id: ID!): Person
	"Manda un saludo"
	
	saludo: String
}

input CourseInput {
	title: String!
	teacher: String
	description: String!
	topic: String
	level: Level
}

input CourseEditInput {
	title: String
	teacher: String
	description: String
	topic: String
}

# Si creo las personas con un phone será un monitor
# Si creo las personas con un avatar será un estudiante
input PersonInput {
	name: String!
	email: String!
	phone: String
	avatar: String
}

input PersonEditInput {
	name: String
	email: String
	phone: String
	avatar: String
}

type Mutation {
	"Crea un curso"
	createCourse(input: CourseInput!): Course
	"Edita un curso"
	editCourse(_id: ID!, input: CourseEditInput): Course
	"Crea una persona"
	createPerson(input: PersonInput!): Person
	"Edita una persona"
	editPerson(_id: ID!, input: PersonEditInput): Person
	"Agrega una persona a un curso"
	addPeople(courseID: ID!, personID: ID!): Course
}